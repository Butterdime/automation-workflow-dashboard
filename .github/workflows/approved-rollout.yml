name: Approved Rollout Workflow

on:
  repository_dispatch:
    types: [approved-rollout]
  workflow_dispatch:
    inputs:
      organization:
        description: 'Organization to deploy'
        required: true
        default: 'your-org'
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - development
          - staging
          - production

env:
  NODE_VERSION: '22'
  DEPLOYMENT_TIMEOUT: '10m'

jobs:
  validation:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.validation.outputs.should_deploy }}
      org_name:    ${{ steps.validation.outputs.org_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version:         ${{ env.NODE_VERSION }}
          cache:                'npm'
          cache-dependency-path: |
            api/package-lock.json
            dashboard/package-lock.json

      - name: Validate approval payload
        id: validation
        run: |
          ORG_NAME="${{ github.event.client_payload.organization || github.event.inputs.organization }}"
          APPROVED_BY="${{ github.event.client_payload.approved_by  || github.actor }}"
          TIMESTAMP="${{ github.event.client_payload.timestamp    || github.event.head_commit.timestamp }}"

          ALLOWED_ORGS="your-org,your-org-1,your-org-2,your-org-3"
          if [[ ",$ALLOWED_ORGS," =~ ",$ORG_NAME," ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "org_name=$ORG_NAME"          >> $GITHUB_OUTPUT
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Install dependencies & run checks
        run: |
          cd api && npm ci
          cd ../dashboard && npm ci
          cd ../api && npm test || echo "No tests"
          cd ../api && npm run lint || echo "No linting"

  setup-deps:
    name: Cache & Install Dependencies
    runs-on: ubuntu-latest
    needs: validation
    if: needs.validation.outputs.should_deploy == 'true'

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version:         ${{ env.NODE_VERSION }}
          cache:                'npm'
          cache-dependency-path: |
            api/package-lock.json
            dashboard/package-lock.json

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: |
            api/node_modules
            dashboard/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Verify dependencies
        run: |
          cd api     && npm ci && npm ls --depth=0
          cd ../dashboard && npm ci && npm ls --depth=0

  deployment:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validation, setup-deps]
    if: needs.validation.outputs.should_deploy == 'true'
    environment: production
    outputs:
      dashboard_url: https://approval-ci-dashboard.vercel.app

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - uses: actions/cache@v3
        with:
          path: |
            api/node_modules
            dashboard/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          cd dashboard && npm ci

      - name: Build dashboard
        run: |
          cd dashboard
          npm run build || echo "No build step"

      - name: Deploy to Vercel
        id: vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: './dashboard'
          github-comment: false
          github-deployment: false

      - name: Report deployment status
        run: |
          echo "‚úÖ Deployment for ${{ needs.validation.outputs.org_name }}"
          echo "üîó URL: ${{ steps.vercel.outputs.preview-url }}"

  monitoring:
    name: Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: [validation, deployment]
    if: needs.validation.outputs.should_deploy == 'true'

    steps:
      - name: Health check with retries
        run: |
          DASHBOARD_URL="${{ needs.deployment.outputs.dashboard_url }}"
          for i in {1..5}; do
            status=$(curl -s -o /dev/null -w "%{http_code}" "$DASHBOARD_URL")
            if [ "$status" = "200" ]; then
              echo "‚úÖ Dashboard health check passed"; exit 0
            fi
            echo "‚ùå Attempt $i failed (status: $status), retrying..."
            sleep $((i * 5))
          done
          echo "‚ùå Dashboard health check failed after 5 attempts"; exit 1

      - name: Smoke tests
        run: |
          DASHBOARD_URL="${{ needs.deployment.outputs.dashboard_url }}"
          echo "üß™ Running smoke tests on dashboard..."
          
          # Test 1: Check if dashboard loads and contains expected content
          content=$(curl -s "$DASHBOARD_URL")
          if echo "$content" | grep -q "Approval CI Dashboard"; then
            echo "‚úÖ Dashboard content validation passed"
          else
            echo "‚ùå Dashboard content validation failed"
            exit 1
          fi
          
          # Test 2: Check if main functionality elements are present  
          if echo "$content" | grep -q "GitHub Token"; then
            echo "‚úÖ Dashboard UI elements validation passed"
          else
            echo "‚ùå Dashboard UI elements validation failed"
            exit 1
          fi
          
          echo "‚úÖ All smoke tests passed"

      - name: Send notification
        if: always()
        run: |
          echo "Deployment summary for ${{ needs.validation.outputs.org_name }}: ${{ job.status }}"

  feedback-loop:
    name: Feedback Loop
    runs-on: ubuntu-latest
    needs: [validation, deployment, monitoring]
    if: needs.validation.outputs.should_deploy == 'true'

    steps:
      - name: Collect deployment metrics
        run: |
          V=$([[ ${{ needs.validation.result }} == success ]] && echo 1 || echo 0)
          D=$([[ ${{ needs.deployment.result }} == success ]] && echo 1 || echo 0)
          M=$([[ ${{ needs.monitoring.result }} == success ]] && echo 1 || echo 0)
          rate=$(( (V + D + M) * 100 / 3 ))
          echo "Success Rate: ${rate}%"

      - name: Update audit trail
        run: |
          cat << EOF > audit.json
          {
            "org": "${{ needs.validation.outputs.org_name }}",
            "statuses": {
              "validation": "${{ needs.validation.result }}",
              "deployment": "${{ needs.deployment.result }}",
              "monitoring": "${{ needs.monitoring.result }}"
            }
          }
          EOF

      - name: Generate & Upload Report
        run: |
          cat << EOF > deployment-report.md
          # Deployment Report
          **Org:** ${{ needs.validation.outputs.org_name }}
          **Run:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - Validation: ${{ needs.validation.result }}
          - Deployment: ${{ needs.deployment.result }}
          - Monitoring: ${{ needs.monitoring.result }}
          EOF

      - uses: actions/upload-artifact@v3
        with:
          name: deployment-report
          path: deployment-report.md